"""
518. 零钱兑换 II
给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。



示例 1:

输入: amount = 5, coins = [1, 2, 5]
输出: 4
解释: 有四种方式可以凑成总金额:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
示例 2:

输入: amount = 3, coins = [2]
输出: 0
解释: 只用面额2的硬币不能凑成总金额3。
示例 3:

输入: amount = 10, coins = [10]
输出: 1


注意:

你可以假设：

0 <= amount (总金额) <= 5000
1 <= coin (硬币面额) <= 5000
硬币种类不超过 500 种
结果符合 32 位符号整数
"""

from typing import List


class Solution:
    """方法一： 递归"""
    cache = {}

    def change(self, amount: int, coins: List[int]) -> int:
        """使用start，end索引避免coins数组切片带来的拷贝开销"""
        return self._change(amount, coins, 0, len(coins) - 1)

    def _change(self, amount: int, coins: List[int], start: int, end: int):

        """
        所以情况为以下两种情况之和：1. amount-coin金额下，所有硬币的情况；2.amount金额下，除coin外的所有硬币情况。
        即包含第一种硬币的情况和不含第一种硬币的情况。
        amount < 0 或 coins 为空，则有0种换钱方式；
        amount = 0, 则有1种换钱方式;
        """
        key = (amount, start, end)
        if amount == 0:
            self.cache[key] = 1
        elif amount < 0 or start > end:
            self.cache[key] = 0
        elif key not in self.cache:
            self.cache[key] = self._change(amount - coins[start], coins, start, end) + self._change(amount, coins,
                                                                                                    start + 1,
                                                                                                    end)
        return self.cache[key]


class Solution2:
    """
    方法二：动态规划
    70. 爬楼梯
    518. 零钱兑换2

    爬楼梯：排列 有顺序 先遍历总台阶数，再遍历步长;
    零钱兑换：组合 无顺序 先遍历硬币面值，再遍历总金额
        子问题：problem(coins, amount) = problem(coins-1, amount) + problem(coins, amount - coin)，
        即 不用coin金额就凑到amount的排列 + 用了coin金额的排列(未使用coins时正好凑到amount-coin)
    """

    def change(self, amount: int, coins: List[int]) -> int:
        dp = [0 for i in range(amount + 1)]
        dp[0] = 1
        for coin in coins:
            for j in range(1, amount + 1):
                if coin > j:
                    continue
                dp[j] += dp[j - coin]

        return dp[-1]


def main():
    s=Solution()
    s2 = Solution2()
    for amount, coins in (
            (5, [1, 2, 5]), (3, [2]), (10, [10]), (500, [2, 7, 13]), (500, [3, 5, 7, 8, 9, 10, 11]),
            (3999,
             [200, 217, 234, 251, 268, 285, 302, 319, 336, 353, 370, 387, 404, 421, 438, 455, 472, 489,
              506,
              523, 540, 557, 574, 591, 608, 625, 642, 659, 676, 693, 710, 727, 744, 761, 778, 795, 812,
              829,
              846, 863, 880, 897, 914, 931, 948, 965, 982, 999, 1016, 1033, 1050, 1067, 1084, 1101, 1118,
              1135, 1152, 1169, 1186, 1203, 1220, 1237, 1254, 1271, 1288, 1305, 1322, 1339, 1356, 1373,
              1390,
              1407, 1424, 1441, 1458, 1475, 1492, 1509, 1526, 1543, 1560, 1577, 1594, 1611, 1628, 1645,
              1662,
              1679, 1696, 1713, 1730, 1747, 1764, 1781, 1798, 1815, 1832, 1849, 1866, 1883, 1900, 1917,
              1934,
              1951, 1968, 1985, 2002, 2019, 2036, 2053, 2070, 2087, 2104, 2121, 2138, 2155, 2172, 2189,
              2206,
              2223, 2240, 2257, 2274, 2291, 2308, 2325, 2342, 2359, 2376, 2393, 2410, 2427, 2444, 2461,
              2478,
              2495, 2512, 2529, 2546, 2563, 2580, 2597, 2614, 2631, 2648, 2665, 2682, 2699, 2716, 2733,
              2750,
              2767, 2784, 2801, 2818, 2835, 2852, 2869, 2886, 2903, 2920, 2937, 2954, 2971, 2988, 3005,
              3022,
              3039, 3056, 3073, 3090, 3107, 3124, 3141, 3158, 3175, 3192, 3209, 3226, 3243, 3260, 3277,
              3294,
              3311, 3328, 3345, 3362, 3379, 3396, 3413, 3430, 3447, 3464, 3481, 3498, 3515, 3532, 3549,
              3566,
              3583, 3600, 3617, 3634, 3651, 3668, 3685, 3702, 3719, 3736, 3753, 3770, 3787, 3804, 3821,
              3838,
              3855, 3872, 3889, 3906, 3923, 3940, 3957, 3974, 3991, 4008, 4025, 4042, 4059, 4076, 4093,
              4110,
              4127, 4144, 4161, 4178, 4195, 4212, 4229, 4246, 4263, 4280, 4297, 4314, 4331, 4348, 4365,
              4382,
              4399, 4416, 4433, 4450, 4467, 4484, 4501, 4518, 4535, 4552, 4569, 4586, 4603, 4620, 4637,
              4654,
              4671, 4688, 4705, 4722, 4739, 4756, 4773, 4790, 4807, 4824, 4841, 4858, 4875, 4892, 4909,
              4926,
              4943, 4960, 4977, 4994]),):
        s.cache = {}
        print(s.change(amount, coins))
        print(s2.change(amount, coins))


if __name__ == '__main__':
    import timeit

    print(timeit.timeit(main, number=1))
